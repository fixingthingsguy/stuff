 
/*
 MODIFIED BY SUDHIR BIJANKI FOR HOME USE, USE AT YOUR OWN RISK
 -Heavily patched code, someday I will fix it up
 
 Arduino GroveStreams Stream Feed via Ethernet
  
 The GroveStreams client sketch is designed for the Arduino and Ethernet.
 A full "how to" guide for this sketh can be found at https://www.grovestreams.com/developers/getting_started_arduino_temp.html
 This sketch updates several stream feeds with an analog input reading,
 from a temperature probe, via the GroveStreams API: https://www.grovestreams.com/developers/apibatchfeed.html#apu1a
 The Arduino uses DHCP and DNS for a simpler network setup.
 The sketch also includes Internet Connection Reset logic to ensure the
 Arduino stays connected and can regain connectivity after a network outage.
 Use the Serial Monitor on the Arduino IDE to see verbose network feedback
 and the GroveStreams connectivity status.
 
 GroveStreams Setup:
 
 * Sign Up for Free User Account - https://www.grovestreams.com
 * Create a GroveStreams organization and select the Arduino blueprint
 * Enter a unique MAC Address for this network in this sketch under "Local Network Settings"
 *    (Newer shields have the mac address on a sticker on the shield. Use that.)
 *    (A MAC address can also be generated within a GroveStreams organization: Tools toolbar button - Generate MAC Address)
 *    (The MAC address is used to identify this device within GroveStreams. It must be unique within your GS organization)
 * Enter the GroveStreams api key under "GroveStreams Settings" in this sketch  
 *    (The api key can be retrieved from a GroveStreams organization: click the Api Keys toolbar button,
 *     select your Api Key, and click View Secret Key. Paste the Secret Key below)
 
 Arduino Requirements:
 
 * Arduino with Ethernet Shield or Arduino Ethernet
 * Arduino 1.0 IDE
 
 Network Requirements:
 
 * Ethernet port on Router    
 * DHCP enabled on Router
 * Unique MAC Address for Arduino
 
 Additional Credits:
 Example sketches from Arduino team, Ethernet by David A. Mellis
 Sketch review and advice from Arduino enthusiast and expert David Thompson, http://www.desert-home.com/
 */
 
#include <SPI.h>
#include <Ethernet.h>
#define aref_voltage 3.3  // we tie 3.3V to ARef and measure it with a multimeter!
//TMP36 PIN VARIABLES
int tempPinlocA = 1;        //the analog pin the TMP36's Vout (sense) pin is connected to
                        //the resolution is 10 mV / degree centigrade with a
                        //500 mV offset to allow for negative temperatures
int tempReadinglocA;        // the analog reading from the sensor
// LOCAL NETWORK SETTINGS
byte mac[] = {
  0xEE, 0xAE, 0xBE, 0xEF, 0xFE, 0xED };  // Change this!!! Must be unique on local network.
                                         // Look for a sticker on the back of your Ethernet shield.
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\// 
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\// 
// GROVESTREAM SETTINGS
String gsApiKey = "77f09857-fdf6-3ed6-93dc-83d7585c68e6";   //Change This!!!
String gsComponentName = "New";        // change. Set this to give your component a name when it initially registers.
 
char gsDomain[] = "grovestreams.com";   //Don't change. The GroveStreams domain.
String gsComponentTemplateId = "myorg.mysensor";  //Don't change. Tells GS what template to use when the feed initially arrives and a new component needs to be created.
                                       
 
String gsStreamId1 = "s3";   //Don't change. Temp F - Interval Stream (20 second Intervals). Don't change.
String gsStreamId2 = "s4";
 
const unsigned long updateFrequency = 1000UL; //900000UL;    // GroveStreams update frequency in milliseconds (the GS blueprint is expecting 15s)
                                       // You will need to change your GroveStreams interval stream base cycles to match the new value if you change updateFrequency.
const int gdoorPin = 2;          // You might need to change depending on the Pin you are using. The Temperature pin number.    
int initcount = 1;
float gdoorvoltage;
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\// 
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\//  
 
// VARIABLE SETUP
String myIPAddress;  //Don't Change. Set below from DHCP. Needed by GroveStreams to verify that a device is not uploading more than once every 10s.
String myMac;        //Don't Change. Set below from the above mac variable. The readable Mac is used by GS to determine which component the
                     // feeds are uploading into. It must match an existing GroveStreams component's ID
 
unsigned long lastSuccessfulUploadTime = 0; //Don't change. Used to determine if samples need to be uploaded.
boolean lastConnected = false;              //Don't change. Used for Internet Connection Reset logic
int failedCounter = 0;                      //Don't change. Used for Internet Connection Reset logic
  int count=0;        
// Initialize Arduino Ethernet Client
EthernetClient client;
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\// 
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\// 
 
void setup()
{
  // Start Serial for debugging on the Serial Monitor
  Serial.begin(9600);
  // If you want to set the aref to something other than 5v
  analogReference(EXTERNAL);
  pinMode(1 , INPUT_PULLUP);
  pinMode(2, INPUT_PULLUP);   //configure pin2 as an input and enable the internal pull-up resistor for better accuracy
  // Start Ethernet on Arduino
  
 
}
 
 //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\// 
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\// 
 void loop()
{  
        float LastState=gdoorvoltage;Serial.print("Last State="); Serial.println(LastState);
        client.stop();
        startEthernet();                                             
                                                        String sensvalu = getSensordata();  //& Serial.println(sensvalu);
                                                       //Set Currrent State of Gdoor
                                                       float currentState = gdoorvoltage; //last value
                                                       Serial.print("Current State="); Serial.println(currentState);
                        
                                                       delay (1000);
                                                       
                                                       float newState = digitalRead(2);  //current
                                                     //float newState = gdoorvoltage;
                                                        Serial.print("New State="); Serial.println(newState);             
                                                                     
                                                        sensvalu = getSensordata(); //& Serial.println(sensvalu);
                       
                         { // Print Update Response to Serial Monitor
                          if (client.available())
                          {
                            char c = client.read();
                            Serial.print(c);
                          }
                         
                          // Disconnect from GroveStreams
                          if (!client.connected() && lastConnected)
                          {
                            Serial.println(F("...disconnected"));
                            Serial.println();
                         
                            client.stop();
                          }
                           
                          // Update sensor data to GroveStreams
                          if(!client.connected() && (millis() - lastSuccessfulUploadTime > updateFrequency))
                          {
                           //& Serial.print("MILLIS"); Serial.println(millis());
    
                           if(initcount ==1 ) {
                            updateGroveStreams(sensvalu); Serial.print("In the Mystery zone");
                            initcount = 0;
                            }
                            
                            if(initcount == 0 && ((LastState != currentState) || (currentState != newState)||(newState != LastState))) {
                            updateGroveStreams(sensvalu);Serial.print("In the Mystery zone");
                            }    
                            currentState = newState;                         
                          //&  count++; Serial.print("After Update Count");Serial.println(count);
                          //& Serial.println(sensvalu);
                          }
                         
                          // Check if Arduino Ethernet needs to be restarted
                          if (failedCounter > 3 ) {
                           
                            //Too many failures. Restart Ethernet.
                            startEthernet();
                          }
                         
                          lastConnected = client.connected();  
                                                   
                          }
                                    
                                    
}
 //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\// 
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\// 
 
void updateGroveStreams(String sensvalu)
{
  unsigned long connectAttemptTime = millis();
  
  if (client.connect(gsDomain, 80))
  {        
 
    //Assemble the url used to pass the sensor readings to GroveStreams.
    // The Arduino String class can be memory intensive. char arrays should be used instead. But,
    // to make this example simple to understand we have chosen to use the String class.
    //We are passing temperature readings into two types of GroveStreams streams, Random and Interval streams.
    
   String url = "PUT /api/feed?compTmplId=" + gsComponentTemplateId;
    url +="&compId=" + myMac;
    url += "&compName=" + gsComponentName;
    url += "&api_key=" + gsApiKey;
    Serial.println(url);
    url += sensvalu;+
    Serial.println(url);
    url += " HTTP/1.1";
    Serial.println(sensvalu);
    Serial.println(url);
     
    client.println(url);  //Send the url with temp readings in one println(..) to decrease the chance of dropped packets
    client.println("Host: " + String(gsDomain));
    client.println(F("Connection: close"));
    client.println("X-Forwarded-For: "+ myIPAddress); //Include this line if you have more than one device uploading behind
                                                      // your outward facing router (avoids the GS 10 second upload rule)
    client.println(F("Content-Type: application/json"));
    client.println();
 
    if (client.available())
    {
      //Read the response and display in the the console
      char c = client.read();
      Serial.print("C?="); Serial.print(c);
    }
 
    if (client.connected())
    { Serial.println("connected");
      //client.println("GET /search?q=arduino HTTP/1.0");
     // client.println();
      lastSuccessfulUploadTime = connectAttemptTime;
      failedCounter = 0;
    }
    else
    {
      //Connection failed. Increase failed counter
      failedCounter++;
 
      Serial.println("Connection to GroveStreams failed ("+String(failedCounter, DEC)+")");  
      Serial.println();
    }
 
  }
  else
  {
     //Connection failed. Increase failed counter
    failedCounter++;
 
    Serial.println("Connection to GroveStreams Failed ("+String(failedCounter, DEC)+")");  
    Serial.println();
  }
}
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\// 
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\//  
void startEthernet()
{
  //Start or restart the Ethernet connection.
  client.stop();
 
  Serial.println(F("Connecting Arduino to network..."));
  Serial.println();  
 
  //Wait for the connection to finish stopping
  delay(2000);
 
  //Connect to the network and obtain an IP address using DHCP
  if (Ethernet.begin(mac) == 0)
  {
    Serial.println(F("DHCP Failed, reset Arduino to try again"));
    Serial.println();
  }
  else
  {
 
    Serial.println(F("Arduino connected to network using DHCP"));
    Serial.println();
 
    //Set the mac and ip variables so that they can be used during sensor uploads later
    myMac = getMacReadable();
    Serial.println("MAC: " + myMac);
 
    myIPAddress = getIpReadable(Ethernet.localIP());
    Serial.println("IP address: " + myIPAddress);
  }
  
}
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\// 
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\//  
String getMacReadable()
{
  //Convert the mac address to a readable string
  char macstr[20];
  snprintf(macstr, 100, "%02x:%02x:%02x:%02x:%02x:%02x", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
  return String(macstr);
}
 //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\// 
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\// 
String getIpReadable(IPAddress p)
{
  //Convert the ip address to a readable string
  String ip;
  for (int i =0; i < 3; i++)
  {
    ip += String(p[i], DEC);
    ip += ".";
  }
  ip +=String(p[3], DEC);
  return ip;
}
 //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\// 
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\// 
String getSensordata()
{
  //Get the  analog voltage of the garage door indicator   and convert it to a string
  
    gdoorvoltage = digitalRead(2);
//& Serial.print("SENSORDATA:Gdoorvoltage"); Serial.println(gdoorvoltage);
   char gdoor[15] = {0}; //Initialize buffer to nulls
  dtostrf(gdoorvoltage, 12, 3, gdoor); //Convert float to string
  String gdoorstringconvert(gdoor);
 //& Serial.print("SENSORDATA:Gdoorstringconvert");Serial.println(gdoorstringconvert);
  gdoorstringconvert.trim();
 //get the voltage reading of the temp sensoe and convert it to a string    
  float tmp36voltagelocA, tmp36tempFlocA, tmp36tempClocA, voltage;
  //start averaging of n readings for temperature
               float averageReading = 0;
               int n ;
               int numReadings = 1;
               analogRead(tempPinlocA); //throw away first reading
               for (int n = 0; n < numReadings; n++) {
                 delay(1000); averageReading += analogRead(tempPinlocA);
               }
               averageReading /= numReadings;
               tempReadinglocA = averageReading;           
   //end  averaging of n readings for temperature
  
  tempReadinglocA = analogRead(tempPinlocA);
//& Serial.print("Temp reading = ");   Serial.println(tempReadinglocA);     // the raw analog reading
   // converting that reading to voltage, which is based off the reference voltage
   tmp36voltagelocA = tempReadinglocA * aref_voltage;
 //&                   Serial.println(tmp36voltagelocA);
    tmp36voltagelocA /= 1024;                
  voltage = tmp36voltagelocA; 
  // print out the voltage
 //& Serial.print(" - ");
 //& Serial.print(voltage); Serial.println(" volts");
  // now print out the temperature
  tmp36tempClocA = (voltage - 0.5) * 100 ;  //converting from 10 mv per degree wit 500 mV offset
                                               //to degrees ((volatge - 500mV) times 100) 
  //&  Serial.print(tmp36tempClocA); Serial.println(" degrees C");                                          
   // now convert to Fahrenheight
  tmp36tempFlocA = (tmp36tempClocA * 9.0 / 5.0) + 32.0;
 //& Serial.println(tmp36tempFlocA); Serial.println(" degrees F");                                            
  char tmp36locA[15] = {0}; //Initialize buffer to nulls
  dtostrf(tmp36tempFlocA, 12, 3, tmp36locA); //Convert float to string
  String tmp36locAstringconvert(tmp36locA);
  tmp36locAstringconvert.trim();
  
  
  String sensvalu;
  sensvalu = "&" + gsStreamId1 + "=" + gdoorstringconvert; 
    sensvalu += "&" + gsStreamId2 + "=" + tmp36locAstringconvert;
  Serial.print("SENSORDATA:Gdoorstringconvert");Serial.println(gdoorstringconvert);
//&  Serial.println(tmp36locAstringconvert);
  Serial.println(sensvalu);
  return sensvalu;
}
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\// 
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
